name: Bugment Code View

on:
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        edited,
        ready_for_review,
        converted_to_draft,
      ]

jobs:
  print_diff_and_content:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print PR Basic Info
        run: |
          echo "=== PR Basic Information ==="
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "PR State: ${{ github.event.pull_request.state }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"
          echo "PR URL: ${{ github.event.pull_request.html_url }}"
          echo ""

      - name: Print PR Body
        run: |
          echo "=== PR Description ==="
          echo "${{ github.event.pull_request.body }}"
          echo ""

      - name: Print Project and Generate PR Diff File
        run: |
          echo "=== Project Information ==="
          echo "Project absolute path: $(pwd)"
          echo "Repository root: $(git rev-parse --show-toplevel)"
          echo ""

          echo "=== Generating PR Diff File ==="
          DIFF_FILE="/tmp/pr_diff.diff"
          git diff origin/${{ github.event.pull_request.base.ref }}..origin/${{ github.event.pull_request.head.ref }} > "$DIFF_FILE"
          echo "PR Diff saved to: $DIFF_FILE"
          echo "Absolute path: $(realpath $DIFF_FILE)"
          echo "File size: $(wc -c < $DIFF_FILE) bytes"
          echo "Line count: $(wc -l < $DIFF_FILE) lines"
          echo ""

      - name: Print Changed Files
        run: |
          echo "=== Changed Files ==="
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}..origin/${{ github.event.pull_request.head.ref }}
          echo ""

      - name: Print Diff File Content (First 50 lines)
        run: |
          echo "=== PR Diff Preview (First 50 lines) ==="
          DIFF_FILE="/tmp/pr_diff.diff"
          head -50 "$DIFF_FILE"
          echo ""
          if [ $(wc -l < "$DIFF_FILE") -gt 50 ]; then
            echo "... (diff truncated, full diff available at: $DIFF_FILE)"
          fi
          echo ""

      - name: Print Additional PR Statistics
        run: |
          echo "=== Additional PR Statistics ==="
          echo "Commits: ${{ github.event.pull_request.commits }}"
          echo "Additions: ${{ github.event.pull_request.additions }}"
          echo "Deletions: ${{ github.event.pull_request.deletions }}"
          echo "Changed Files: ${{ github.event.pull_request.changed_files }}"
          echo "Mergeable: ${{ github.event.pull_request.mergeable }}"
          echo "Draft: ${{ github.event.pull_request.draft }}"
          echo "Created At: ${{ github.event.pull_request.created_at }}"
          echo "Updated At: ${{ github.event.pull_request.updated_at }}"
          echo ""

      - name: Setup Node.js for Code Review Tool
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Install tsx globally
        run: npm install -g tsx

      - name: Setup Augment Authentication
        run: |
          echo "=== Setting up Augment Authentication ==="

          # 创建配置目录
          mkdir -p ~/.local/share/vim-augment

          # 创建认证配置文件
          cat > ~/.local/share/vim-augment/secrets.json << EOF
          {
            "augment.sessions": "{\"accessToken\":\"${{ secrets.AUGMENT_ACCESS_TOKEN }}\",\"tenantURL\":\"${{ secrets.AUGMENT_TENANT_URL }}\",\"scopes\":[\"email\"]}"
          }
          EOF

          echo "Augment authentication configured successfully"
          echo "Config file created at: ~/.local/share/vim-augment/secrets.json"

      - name: Run Code Review Tool
        id: code_review
        run: |
          echo "=== Running Code Review Tool ==="

          PROJECT_PATH="$(pwd)"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          DIFF_FILE="/tmp/pr_diff.diff"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"

          echo "Project Path: $PROJECT_PATH"
          echo "PR Title: $PR_TITLE"
          echo "Diff File: $DIFF_FILE"
          echo "Repository: $REPO_OWNER/$REPO_NAME"
          echo "Commit SHA: $COMMIT_SHA"

          # 调用代码审查工具
          echo "Calling: tsx src/review.ts --path \"$PROJECT_PATH\" --title \"$PR_TITLE\" --body \"$PR_BODY\" --diff \"$DIFF_FILE\" --repo-owner \"$REPO_OWNER\" --repo-name \"$REPO_NAME\" --commit-sha \"$COMMIT_SHA\""

          # 捕获输出并处理错误
          if REVIEW_RESULT=$(tsx src/review.ts --path "$PROJECT_PATH" --title "$PR_TITLE" --body "$PR_BODY" --diff "$DIFF_FILE" --repo-owner "$REPO_OWNER" --repo-name "$REPO_NAME" --commit-sha "$COMMIT_SHA" 2>&1); then
            echo "Code review completed successfully"
            echo "Review result length: ${#REVIEW_RESULT} characters"
          else
            echo "Code review failed with error:"
            echo "$REVIEW_RESULT"
            # 设置一个默认的错误消息
            REVIEW_RESULT="❌ 代码审查工具执行失败，请检查日志获取详细信息。"
          fi

          # 保存 review 结果到环境变量（处理多行文本）
          echo "REVIEW_RESULT<<EOF" >> $GITHUB_ENV
          echo "$REVIEW_RESULT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Code Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviewResult = process.env.REVIEW_RESULT;

            if (!reviewResult) {
              console.log('No review result to post');
              return;
            }

            // 发布 PR 评论
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewResult
            });

            console.log('Code review comment posted successfully');
